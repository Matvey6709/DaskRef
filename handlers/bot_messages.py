import re

from aiogram import F, Router
from aiogram.types import Message
from aiogram.utils.chat_action import ChatActionSender

import utils.variables
from utils import variables
from utils.variables import bot, curs, chat_id
from database.requests import completed_ref, count_ref, count_users, get_all_money
from keyboards.inline import pay_value, builder_sub

router = Router()


@router.message(F.text == "üíé –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å")
async def with_puree(message: Message):
    # UsrInfo = await bot.get_chat_member(7207136417, 7207136417)
    # print(UsrInfo)
    await check_subscribe(message)


@router.message(F.text == "üíº –ö–∞–±–∏–Ω–µ—Ç")
async def with_puree(message: Message):
    await check_subscribe(message)


@router.message(F.text == "üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
async def with_puree(message: Message):
    await check_subscribe(message)


@router.message()
async def check_subscribe(message):

    check_b = False
    for i in range(len(chat_id)):
        user_channel_status = await bot.get_chat_member(chat_id=chat_id[i],
                                                        user_id=message.from_user.id)
        matches = re.findall(r"'(.+?)'", str(user_channel_status))
        if matches[0] == 'left':
            check_b = True
    if not check_b:
        await completed_ref(message.from_user.id)
        if message.text == "üíé –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å":
            await message.reply(
                f"üë• –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ, –∑–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–ø–æ–ª–Ω–∏—Ç —É—Å–ª–æ–≤–∏—è, –ø–æ–ª—É—á–∏—Ç–µ {curs} ‚ÇΩ\n"
                f'üöÄ –í–æ—Ç —Ç–≤–æ—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ: \n'
                f'<code>https://t.me/daskref_bot?start={message.from_user.id}</code>'
                , parse_mode='HTML')
        if message.text == "üíº –ö–∞–±–∏–Ω–µ—Ç":
            us = await count_ref(message.from_user.id)
            async with ChatActionSender.typing(bot=bot, chat_id=message.from_user.id):
                # user_info = await get_user_data(user_id=message.from_user.id)
                text = (f'üëâ –í–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º ID: <b>{message.from_user.id}</b>\n'
                        f'üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö —Ç–æ–±–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —É—Å–ª–æ–≤–∏—è: <b>{us}</b>\n'
                        f'üíµ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {us*curs} ‚ÇΩ (–∫—É—Ä—Å: 1 —Ä–µ—Ñ–µ—Ä–∞–ª = {curs} ‚ÇΩ)\n'
                        f'–í—ã–≤–µ—Å—Ç–∏ –º–æ–∂–Ω–æ –æ—Ç {variables.count_ref * curs} ‚ÇΩ')

            await message.answer(text, parse_mode='HTML', reply_markup=pay_value.as_markup())
        if message.text == "üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
            count_users_ = await count_users()
            await message.reply(f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {count_users_}\n"
                                f"–í—ã–ø–ª–∞—á–µ–Ω–æ –≤—Å–µ–≥–æ: {await get_all_money()}")
    else:

        await message.answer(
            '–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª(—ã)!\n(–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø—è—Ç—å –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É)',
            reply_markup=builder_sub.as_markup(resize_keyboard=True))

